#include "Tetramino.h"


// Создание объекта класса Tetramino будет происходит при помощи конструктора

// То есть фигурка будет создана в определенном месте, под углом в 0 градусов
// и иметь начальную скорость падения
Tetramino::Tetramino(int shape, int x, int y, int angle)
{
	this->shape = shape;
	this->x = x;
	this->y = y;
	this->angle = angle;
	this->speed = 1;
}

int Tetramino::getSpeed() const
{
	return this->speed;
}

void Tetramino::setSpeed(int speed)
{
	this->speed = speed;
}

int Tetramino::getX() const
{
	return this->x;
}

int Tetramino::getY() const
{
	return this->y;
}

void Tetramino::rotate()
{
	this->angle = (this->angle + 1) % 4;
}

/*	Функцию поворота и формирования фигурок можно улучшить,
	используя математику и матрицу 4х4						*/

// Двигаем тетрамино по полю
void Tetramino::move(int dx, int dy)
{
	this->x += dx;
	this->y += dy;
}

// Фиугры в каждой проекции (0, 90, 180, 270)

// Возвращает [форма][угол][х координата][y координата]
bool Tetramino::getValue(int x, int y) const
{
	static const bool SHAPES[5][4][4][4] =
	{
		{
			{
				{0, 0, 0, 0},
				{1, 1, 1, 1},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 0, 0},
				{0, 1, 0, 0},
				{0, 1, 0, 0},
				{0, 1, 0, 0}
			},
			{
				{0, 0, 0, 0},
				{1, 1, 1, 1},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 0, 0},
				{0, 1, 0, 0},
				{0, 1, 0, 0},
				{0, 1, 0, 0}
			}
		},
		{
			{
				{0, 1, 1, 0},
				{0, 1, 1, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 1, 0},
				{0, 1, 1, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 1, 0},
				{0, 1, 1, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 1, 0},
				{0, 1, 1, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			}
		},
		{
			{
				{1, 0, 0, 0},
				{1, 0, 0, 0},
				{1, 1, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{1, 1, 1, 0},
				{1, 0, 0, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 1, 0},
				{0, 0, 1, 0},
				{0, 0, 1, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 0, 0, 0},
				{0, 0, 1, 0},
				{1, 1, 1, 0},
				{0, 0, 0, 0}
			}
		},
		{
			{
				{0, 0, 1, 1},
				{1, 1, 0, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 0, 0},
				{0, 1, 1, 0},
				{0, 0, 1, 0},
				{0, 0, 0, 0}
			},
				{
				{0, 0, 1, 1},
				{1, 1, 0, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 0, 0},
				{0, 1, 1, 0},
				{0, 0, 1, 0},
				{0, 0, 0, 0}
			}
		},
		{
			{
				{0, 1, 0, 0},
				{1, 1, 1, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{1, 0, 0, 0},
				{1, 1, 0, 0},
				{1, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{1, 1, 1, 0},
				{0, 1, 0, 0},
				{0, 0, 0, 0},
				{0, 0, 0, 0}
			},
			{
				{0, 1, 0, 0},
				{1, 1, 0, 0},
				{0, 1, 0, 0},
				{0, 0, 0, 0}
			}
		}
	};
	return SHAPES[this->shape][angle][y][x];
}